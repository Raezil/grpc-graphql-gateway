// graphql.proto
//
// Copyright (c) 2020 ysugimoto
//
// Released under the MIT license.
// see https://opensource.org/licenses/MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: graphql.proto

package graphql

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// explicit schema declaration enum
type GraphqlType int32

const (
	// schema will generate as Query
	GraphqlType_QUERY GraphqlType = 0
	// schema will generate as Mutation
	GraphqlType_MUTATION GraphqlType = 1
	// schema will generate as Resolver. Resolver behaves not listed in query, but can resolve nested field.
	GraphqlType_RESOLVER GraphqlType = 2
	// schema will generate Subscription.
	GraphqlType_SUBSCRIPTION GraphqlType = 3
)

// Enum value maps for GraphqlType.
var (
	GraphqlType_name = map[int32]string{
		0: "QUERY",
		1: "MUTATION",
		2: "RESOLVER",
		3: "SUBSCRIPTION",
	}
	GraphqlType_value = map[string]int32{
		"QUERY":        0,
		"MUTATION":     1,
		"RESOLVER":     2,
		"SUBSCRIPTION": 3,
	}
)

func (x GraphqlType) Enum() *GraphqlType {
	p := new(GraphqlType)
	*p = x
	return p
}

func (x GraphqlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphqlType) Descriptor() protoreflect.EnumDescriptor {
	return file_graphql_proto_enumTypes[0].Descriptor()
}

func (GraphqlType) Type() protoreflect.EnumType {
	return &file_graphql_proto_enumTypes[0]
}

func (x GraphqlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphqlType.Descriptor instead.
func (GraphqlType) EnumDescriptor() ([]byte, []int) {
	return file_graphql_proto_rawDescGZIP(), []int{0}
}

// Extend ServiceOptions in order to define grpc connection setting.
// User can use this option as following:
//
//	service Greeter {
//	   option (graphql.service) = {
//	     host: "localhost:50051" // define grpc connection host and port
//	     insecure: true          // set true if connect to insecure grpc server
//	   };
//
//	   ... some rpc definitions
//	}
type GraphqlService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// gRPC default connection host.
	// This value should include host and port, say localhost:50051.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// If true, automatic connection with insecure option.
	Insecure      bool `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphqlService) Reset() {
	*x = GraphqlService{}
	mi := &file_graphql_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphqlService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphqlService) ProtoMessage() {}

func (x *GraphqlService) ProtoReflect() protoreflect.Message {
	mi := &file_graphql_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphqlService.ProtoReflect.Descriptor instead.
func (*GraphqlService) Descriptor() ([]byte, []int) {
	return file_graphql_proto_rawDescGZIP(), []int{0}
}

func (x *GraphqlService) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GraphqlService) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

// Extend MethodOptions in order to define GraphQL Query or Mutation.
// User can use this option as following:
//
//	service Greeter {
//	   rpc SayHello(HelloRequest) returns (HelloReply) {
//	     option (graphql.schema) = {
//	       type: QUERY    // declare as Query
//	       name: "hello"  // query name
//	     }
//	   }
//	}
//
// Since gRPC reason, it has limitation that the response could not be repeated.
// it's dificcurl to respond array response, so that we accept "response.pluck"
// in order to expose repeated fields in response message.
//
// For instance:
//
//	message Member {
//	  string name = 1;
//	}
//
//	message ListMembersResponse {
//	  repeated Member members = 1; -- could be array response
//	}
//
// message ListMembersRequest {
// }
//
//	service MemberService {
//	   rpc ListMembers(ListMembersRequest) returns (ListMembersResponse) {
//	     option (graphql.schema) = {
//	       type: QUERY
//	       name: "members"
//	       response {
//	         repeated : true
//	         pluck: "members" // Query will respond [Member] instead of ListMembersResponse
//	       }
//	     }
//	   }
//	}
//
// In mutation declaration:
//
//	service MemberService {
//	   rpc CreateMember(CreateMemberRequest) returns (Member) {
//	     option (graphql.schema) = {
//	       type: MUTATION        // declare as Mutation
//	       name: "cretemember"   // mutation name
//	     }
//	   }
//	}
//
// The Mutation's input always becomes an input object, so you need to declare argument name.
//
//	message Member {
//	  string name = 1;
//	}
//
//	message CreateMemberRequest {
//	  string name = 1;
//	}
//
//	service MemberService {
//	   rpc CreateMember(CreateMemberRequest) returns (Member) {
//	     option (graphql.schema) = {
//	       type: MUTATION
//	       name: "createmember"
//	       request {
//	         name: "member" // this is equivalent to createbook(member: Member): Member in GraphQL
//	       }
//	     }
//	   }
//	}
//
// Finally, user can access this query via /graphql?query={members{name}}
type GraphqlSchema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// graphql type. Enum of QUERY or MUTATION is valid value
	Type GraphqlType `protobuf:"varint,1,opt,name=type,proto3,enum=graphql.GraphqlType" json:"type,omitempty"`
	// query name. this field is required
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Query request object configuration
	Request *GraphqlRequest `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	// Query response object configuration
	Response      *GraphqlResponse `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphqlSchema) Reset() {
	*x = GraphqlSchema{}
	mi := &file_graphql_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphqlSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphqlSchema) ProtoMessage() {}

func (x *GraphqlSchema) ProtoReflect() protoreflect.Message {
	mi := &file_graphql_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphqlSchema.ProtoReflect.Descriptor instead.
func (*GraphqlSchema) Descriptor() ([]byte, []int) {
	return file_graphql_proto_rawDescGZIP(), []int{1}
}

func (x *GraphqlSchema) GetType() GraphqlType {
	if x != nil {
		return x.Type
	}
	return GraphqlType_QUERY
}

func (x *GraphqlSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GraphqlSchema) GetRequest() *GraphqlRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *GraphqlSchema) GetResponse() *GraphqlResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// configuration option for request
type GraphqlRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Define input name.
	// This field enables only for mutation and note that if this field is specified,
	// the gRPC request message will be dealt with an input.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Define pluck message fields
	Plucks        []string `protobuf:"bytes,2,rep,name=plucks,proto3" json:"plucks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphqlRequest) Reset() {
	*x = GraphqlRequest{}
	mi := &file_graphql_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphqlRequest) ProtoMessage() {}

func (x *GraphqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_graphql_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphqlRequest.ProtoReflect.Descriptor instead.
func (*GraphqlRequest) Descriptor() ([]byte, []int) {
	return file_graphql_proto_rawDescGZIP(), []int{2}
}

func (x *GraphqlRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GraphqlRequest) GetPlucks() []string {
	if x != nil {
		return x.Plucks
	}
	return nil
}

// configuration option for response
type GraphqlResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, this response object is required
	// But when you declare "pluck", we respect expose field definition.
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Define pluck message field.
	// Note that this field IS NOT repeated, just single string field.
	// It means the response could only be single.
	Pluck         string `protobuf:"bytes,2,opt,name=pluck,proto3" json:"pluck,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphqlResponse) Reset() {
	*x = GraphqlResponse{}
	mi := &file_graphql_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphqlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphqlResponse) ProtoMessage() {}

func (x *GraphqlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_graphql_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphqlResponse.ProtoReflect.Descriptor instead.
func (*GraphqlResponse) Descriptor() ([]byte, []int) {
	return file_graphql_proto_rawDescGZIP(), []int{3}
}

func (x *GraphqlResponse) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *GraphqlResponse) GetPluck() string {
	if x != nil {
		return x.Pluck
	}
	return ""
}

// GraphqlField is FieldOptions in protobuf in order to define type field attribute.
// User can use this option as following:
//
//	message Member {
//	  string name = 1 [(graphql.field) = {required: true}]; // this field is required in GraphQL, it equivalent to String! on GraphQL
//	}
//
//	message CreateMemberRequest {
//	  string name = 1; [(grahpql.field) = {default: "anonymous"}]; // use default value on input or query
//	}
//
// Note that in protobuf, all fields are dealt with optional
// so the same as it, all GraphQL fields are optional as default.
// If you need to be required, use 'required: true' option
type GraphqlField struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, this field is required.
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Use as other field name (not recommend)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Define default value on input.
	Default string `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	// Omit this field from graphql definition
	Omit bool `protobuf:"varint,4,opt,name=omit,proto3" json:"omit,omitempty"`
	// Resolve this field by nested query with additional RPC
	Resolver      string `protobuf:"bytes,5,opt,name=resolver,proto3" json:"resolver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphqlField) Reset() {
	*x = GraphqlField{}
	mi := &file_graphql_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphqlField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphqlField) ProtoMessage() {}

func (x *GraphqlField) ProtoReflect() protoreflect.Message {
	mi := &file_graphql_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphqlField.ProtoReflect.Descriptor instead.
func (*GraphqlField) Descriptor() ([]byte, []int) {
	return file_graphql_proto_rawDescGZIP(), []int{4}
}

func (x *GraphqlField) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *GraphqlField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GraphqlField) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *GraphqlField) GetOmit() bool {
	if x != nil {
		return x.Omit
	}
	return false
}

func (x *GraphqlField) GetResolver() string {
	if x != nil {
		return x.Resolver
	}
	return ""
}

var file_graphql_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*GraphqlService)(nil),
		Field:         1079,
		Name:          "graphql.service",
		Tag:           "bytes,1079,opt,name=service",
		Filename:      "graphql.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*GraphqlField)(nil),
		Field:         1079,
		Name:          "graphql.field",
		Tag:           "bytes,1079,opt,name=field",
		Filename:      "graphql.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*GraphqlSchema)(nil),
		Field:         1079,
		Name:          "graphql.schema",
		Tag:           "bytes,1079,opt,name=schema",
		Filename:      "graphql.proto",
	},
}

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional graphql.GraphqlService service = 1079;
	E_Service = &file_graphql_proto_extTypes[0]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional graphql.GraphqlField field = 1079;
	E_Field = &file_graphql_proto_extTypes[1]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional graphql.GraphqlSchema schema = 1079;
	E_Schema = &file_graphql_proto_extTypes[2]
)

var File_graphql_proto protoreflect.FileDescriptor

const file_graphql_proto_rawDesc = "" +
	"\n" +
	"\rgraphql.proto\x12\agraphql\x1a google/protobuf/descriptor.proto\"@\n" +
	"\x0eGraphqlService\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x1a\n" +
	"\binsecure\x18\x02 \x01(\bR\binsecure\"\xb6\x01\n" +
	"\rGraphqlSchema\x12(\n" +
	"\x04type\x18\x01 \x01(\x0e2\x14.graphql.GraphqlTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x121\n" +
	"\arequest\x18\x03 \x01(\v2\x17.graphql.GraphqlRequestR\arequest\x124\n" +
	"\bresponse\x18\x04 \x01(\v2\x18.graphql.GraphqlResponseR\bresponse\"<\n" +
	"\x0eGraphqlRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06plucks\x18\x02 \x03(\tR\x06plucks\"C\n" +
	"\x0fGraphqlResponse\x12\x1a\n" +
	"\brequired\x18\x01 \x01(\bR\brequired\x12\x14\n" +
	"\x05pluck\x18\x02 \x01(\tR\x05pluck\"\x88\x01\n" +
	"\fGraphqlField\x12\x1a\n" +
	"\brequired\x18\x01 \x01(\bR\brequired\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\adefault\x18\x03 \x01(\tR\adefault\x12\x12\n" +
	"\x04omit\x18\x04 \x01(\bR\x04omit\x12\x1a\n" +
	"\bresolver\x18\x05 \x01(\tR\bresolver*F\n" +
	"\vGraphqlType\x12\t\n" +
	"\x05QUERY\x10\x00\x12\f\n" +
	"\bMUTATION\x10\x01\x12\f\n" +
	"\bRESOLVER\x10\x02\x12\x10\n" +
	"\fSUBSCRIPTION\x10\x03:S\n" +
	"\aservice\x12\x1f.google.protobuf.ServiceOptions\x18\xb7\b \x01(\v2\x17.graphql.GraphqlServiceR\aservice:K\n" +
	"\x05field\x12\x1d.google.protobuf.FieldOptions\x18\xb7\b \x01(\v2\x15.graphql.GraphqlFieldR\x05field:O\n" +
	"\x06schema\x12\x1e.google.protobuf.MethodOptions\x18\xb7\b \x01(\v2\x16.graphql.GraphqlSchemaR\x06schemaB3Z1github.com/ysugimoto/grpc-graphql-gateway/graphqlb\x06proto3"

var (
	file_graphql_proto_rawDescOnce sync.Once
	file_graphql_proto_rawDescData []byte
)

func file_graphql_proto_rawDescGZIP() []byte {
	file_graphql_proto_rawDescOnce.Do(func() {
		file_graphql_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_graphql_proto_rawDesc), len(file_graphql_proto_rawDesc)))
	})
	return file_graphql_proto_rawDescData
}

var file_graphql_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_graphql_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_graphql_proto_goTypes = []any{
	(GraphqlType)(0),                    // 0: graphql.GraphqlType
	(*GraphqlService)(nil),              // 1: graphql.GraphqlService
	(*GraphqlSchema)(nil),               // 2: graphql.GraphqlSchema
	(*GraphqlRequest)(nil),              // 3: graphql.GraphqlRequest
	(*GraphqlResponse)(nil),             // 4: graphql.GraphqlResponse
	(*GraphqlField)(nil),                // 5: graphql.GraphqlField
	(*descriptorpb.ServiceOptions)(nil), // 6: google.protobuf.ServiceOptions
	(*descriptorpb.FieldOptions)(nil),   // 7: google.protobuf.FieldOptions
	(*descriptorpb.MethodOptions)(nil),  // 8: google.protobuf.MethodOptions
}
var file_graphql_proto_depIdxs = []int32{
	0, // 0: graphql.GraphqlSchema.type:type_name -> graphql.GraphqlType
	3, // 1: graphql.GraphqlSchema.request:type_name -> graphql.GraphqlRequest
	4, // 2: graphql.GraphqlSchema.response:type_name -> graphql.GraphqlResponse
	6, // 3: graphql.service:extendee -> google.protobuf.ServiceOptions
	7, // 4: graphql.field:extendee -> google.protobuf.FieldOptions
	8, // 5: graphql.schema:extendee -> google.protobuf.MethodOptions
	1, // 6: graphql.service:type_name -> graphql.GraphqlService
	5, // 7: graphql.field:type_name -> graphql.GraphqlField
	2, // 8: graphql.schema:type_name -> graphql.GraphqlSchema
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	6, // [6:9] is the sub-list for extension type_name
	3, // [3:6] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_graphql_proto_init() }
func file_graphql_proto_init() {
	if File_graphql_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_graphql_proto_rawDesc), len(file_graphql_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_graphql_proto_goTypes,
		DependencyIndexes: file_graphql_proto_depIdxs,
		EnumInfos:         file_graphql_proto_enumTypes,
		MessageInfos:      file_graphql_proto_msgTypes,
		ExtensionInfos:    file_graphql_proto_extTypes,
	}.Build()
	File_graphql_proto = out.File
	file_graphql_proto_goTypes = nil
	file_graphql_proto_depIdxs = nil
}
